package edu.kriogenik.infoloader.typeclasses

/**
 * Класс типов, описывающий сущность `монада`.
 * Она является контейнером, к которому привязана некая операция создания новой версии контейнера
 * после воздействия функции. Таким образом, в отличии от других подобных классов типов, данный тип
 * позволяет изменять внешнюю структуру.
 *
 * @tparam F
 *          Тип контейнера, для которого определяется класс.
 */
trait Monad[F[_]]{

  /**
   * Функция "связывания". Применяет на объект fa операцию преобразования f.
   * @param fa
   *           Целевой контейнер.
   * @param f
   *          Функция создания контейнера.
   * @tparam A
   *           Тип хранящихся в контейнере данных.
   * @tparam B
   *           Тип результирующих данных.
   * @return
   *         Контейнер, созданный применением функции f и последующей обработкой
   *         внутренней логикой.
   */
  def bind[A, B](fa: F[A])(f: A => F[B]): F[B]

}

/**
 * Объект для удобного использования класса типа `монада`.
 */
object Monad{

  /**
   * Функция для более удобного использования объекта класса типа.
   * Позволяет упростись получение объекта.
   * {{{
   * До:    implicitly[Monad[X]].(...)
   * После: Monad[X].(...)
   * }}}
   *
   * @param tc
   *         Реализация класса типа, получается неявно.
   * @tparam F
   *         Тип, для которого требуется получение реализации монады.
   * @return
   *         Реализацию нужного класса типа для данного типа.
   */
  def apply[F[_]](implicit tc: Monad[F]): Monad[F] = tc

  /**
   * Неявный класс-обертка для удобного использования методов данного класса типов.
   * @param x
   *          Контейнер, для которого есть реализация монады.
   * @param tc
   *           Реализация монады для требуемого типа.
   * @tparam F
   *           Тип контейнера, имеет кайнд (*->*).
   * @tparam A
   *           Тип значения в контейнере.
   */
  implicit class MonadOps[F[_], A](x: F[A])(implicit tc: Monad[F]){

    /**
     * Функция связывания.
     * @param f
     *          Функция создания новой монады.
     * @tparam B
     *           Тип результата контейнера.
     * @return
     *         Контейнер с новым содержимым.
     */
    def >>=[B](f: A => F[B]): F[B] = tc.bind(x)(f)

  }

}
