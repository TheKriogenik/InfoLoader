package edu.kriogenik.infoloader.typeclasses

/**
 * Класс типов, реализующий возможность изменения
 * порядка вложенности контейнеров первого порядка.
 * @tparam F
 *           Тип первого контейнера.
 * @tparam G
 *           Тип второго контейнера
 */
trait Traversing[F[_], G[_]] {

  /**
   * Функция, меняющая порядок контейнеров.
   * Пример:{{{
   *   val x = List(Some(5), Some(6)): List[Option[Int]]
   *   traverse(x) == Some(List(5, 6))
   *
   *   val y = List(Some(5), None)): List[Option[Int]]
   *   traverse(y) == None
   * }}}
   * @param target
   *               Контейнер, в котором происходит перестановка.
   * @tparam A
   *           Тип знгачения, хранящегося в вложенном контейнере.
   * @return
   *         Второй контейнер, в котором лежит первый, содержащий значение.
   */
  def traverse[A](target: F[G[A]]): G[F[A]]

}

/**
 * Объект для удобного получения реализации данного класса типа.
 */
object Traversing{

  /**
   * Функция для более удобного использования объекта класса типа.
   * Позволяет упростись получение объекта.
   * {{{
   * До:    implicitly[Traversing[A, B]].(...)
   * После: Traversing[A, B].(...)
   * }}}
   *
   * @param f
   *         Реализация класса типа, получается неявно.
   * @tparam F
   *         Тип внешнего контейнера.
   * @tparam G
   *         Тип вложенного контейнера.
   * @return
   *         Реализацию нужного класса типа для данных типов.
   */
  def apply[F[_], G[_]](implicit f: Traversing[F, G]): Traversing[F, G] = f

}
